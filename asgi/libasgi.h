/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/pankgeorg/asgi-go */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "server.go"
 #include <stdlib.h>
 #include <string.h>
 #include "asgi_structs.h"

 // Helper function to create an asgi_string
 static inline asgi_string make_asgi_string(const char* str) {
     asgi_string result;
     if (str == NULL) {
         result.data = NULL;
         result.length = 0;
     } else {
         size_t len = strlen(str);
         result.data = (char*)malloc(len + 1);
         result.data[len] = (char) '\0';
         strcpy(result.data, str);
         result.length = len;
     }
     return result;
 }

 // Helper to free an asgi_string
 static inline void free_asgi_string(asgi_string str) {
     if (str.data != NULL) {
         free(str.data);
     }
 }

 // Helper to free an asgi_event
 static inline void free_asgi_event(asgi_event* event) {
     if (event == NULL) return;

     free_asgi_string(event->request_id);
     free_asgi_string(event->method);
     free_asgi_string(event->path);
     free_asgi_string(event->query_string);
     free_asgi_string(event->scheme);

     // Free headers
     for (size_t i = 0; i < event->headers_count; i++) {
         free_asgi_string(event->headers[i].name);
         free_asgi_string(event->headers[i].value);
     }
     if (event->headers != NULL) {
         free(event->headers);
     }

     // Free client
     if (event->client != NULL) {
         // Access client array elements by pointer arithmetic
         free_asgi_string(*(asgi_string*)((char*)event->client));
         free_asgi_string(*(asgi_string*)((char*)event->client + sizeof(asgi_string)));
         free(event->client);
     }

     // Free server
     if (event->server != NULL) {
         // Access server array elements by pointer arithmetic
         free_asgi_string(*(asgi_string*)((char*)event->server));
         free_asgi_string(*(asgi_string*)((char*)event->server + sizeof(asgi_string)));
         free(event->server);
     }

     // Free body
     if (event->body != NULL) {
         free(event->body);
     }

     // Free the event itself
     free(event);
 }

 // Helper to free an asgi_response
 static inline void free_asgi_response(asgi_response* response) {
     if (response == NULL) return;

     free_asgi_string(response->request_id);

     // Free headers
     for (size_t i = 0; i < response->headers_count; i++) {
         free_asgi_string(response->headers[i].name);
         free_asgi_string(response->headers[i].value);
     }
     if (response->headers != NULL) {
         free(response->headers);
     }

     // Free body
     if (response->body != NULL) {
         free(response->body);
     }

     // Free the response itself
     free(response);
 }

 // C helper function that calls the callback safely
 static inline asgi_response* call_event_callback(asgi_callback_fn callback, asgi_event* event) {
     if (callback == NULL) return NULL;
     return callback(event);
 }

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void freeAsgiEvent(asgi_event* event);
extern char* RegisterEventCallback(char* path, asgi_callback_fn callback);
extern char* StartServer(GoInt port);
extern char* StopServer();
extern char* GetConcurrentRequests();

#ifdef __cplusplus
}
#endif
